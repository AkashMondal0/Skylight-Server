# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Users {
  id: String!
  username: String!
  email: String!
  name: String!
  profilePicture: String
  password: String
  bio: String
  createdAt: DateTime
  updatedAt: DateTime
  roles: [String!]
  isVerified: Boolean
  isPrivate: Boolean
  accessToken: String!
  refreshToken: String!
  loggedDevice: String!
  salt: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Author {
  id: String!
  username: String!
  email: String!
  name: String!
  profilePicture: String
  password: String
  bio: String
  createdAt: DateTime
  updatedAt: DateTime
  roles: [String!]
  isVerified: Boolean
  isPrivate: Boolean
  accessToken: String
  refreshToken: String
  loggedDevice: String
  salt: String
  followed_by: Boolean!
  following: Boolean
}

type Friendship {
  following: Boolean
  followed_by: Boolean
  status: String
  isFeedFavorite: Boolean
  isCloseFriends: Boolean
  blocking: Boolean
  isRestricted: Boolean
  notificationPost: Boolean
  notificationStory: Boolean
  isNotificationReel: Boolean
  isMutingNotification: Boolean
  isMutingPost: Boolean
  isMutingStory: Boolean
  isMutingReel: Boolean
  outgoingRequest: Boolean
  incomingRequest: Boolean
}

type Profile {
  id: String
  username: String
  email: String
  name: String
  profilePicture: String
  password: String
  bio: String
  createdAt: DateTime
  updatedAt: DateTime
  roles: [String!]
  isVerified: Boolean
  isPrivate: Boolean
  accessToken: String
  refreshToken: String
  loggedDevice: String
  salt: String
  postCount: Float
  followerCount: Float
  followingCount: Float
  friendship: Friendship
  top_followers: [Author!]
}

type Comment {
  id: String!
  content: String!
  authorId: String!
  postId: String!
  createdAt: DateTime
  updatedAt: DateTime
  user: Author
}

type Post {
  id: String!
  content: String
  title: String
  fileUrl: [String!]
  createdAt: DateTime
  updatedAt: DateTime
  authorId: String
  username: String
  commentCount: Float
  likeCount: Float
  is_Liked: Boolean
  user: Author
  comments: [Comment!]
  likes: [Author!]
  top_Like: [Author!]
  status: [String!]
}

type Like {
  id: String!
  authorId: String!
  postId: String!
  createdAt: DateTime
  updatedAt: DateTime
  alreadyLiked: Boolean
  user: Users
}

type Message {
  id: String!
  conversationId: String!
  authorId: String
  content: String!
  user: Author
  fileUrl: [String!]
  deleted: Boolean
  seenBy: [String!]
  createdAt: DateTime
  updatedAt: DateTime
}

type Conversation {
  id: String!
  members: [String!]!
  authorId: String!
  messages: [Message!]!
  user: Author
  isGroup: Boolean
  lastMessageContent: String
  createdAt: DateTime
  updatedAt: DateTime
  groupName: String
  groupImage: String
  groupDescription: String
}

type Query {
  findUserProfile(username: String!): Profile!
  findUsersByKeyword(keyword: String!): [Author!]!
  findProfilePosts(findPosts: GraphQLPageQuery!): [Post!]!
  feedTimelineConnection: [Post!]!
  findOnePostWithComment(id: String!): Post!
  findComments(createCommentInput: GraphQLPageQuery!): [Comment!]!
  findAllLikes(findAllLikesInput: GraphQLPageQuery!): [Author!]!
  findAllConversation: [Conversation!]!
  findAllFollower(viewFollowerInput: GraphQLPageQuery!): [Author!]!
  findAllFollowing(viewFollowingInput: GraphQLPageQuery!): [Author!]!
}

input GraphQLPageQuery {
  id: String!
  offset: Float
  limit: Float
}

type Mutation {
  createPost(createPostInput: CreatePostInput!): Post!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  destroyComment(id: String!): Comment!
  createLike(id: String!): Like!
  destroyLike(id: String!): Like!
  createConversation(createConversationInput: CreateConversationInput!): Conversation!
  createFriendship(createFriendshipInput: CreateFriendshipInput!): Friendship!
  destroyFriendship(destroyFriendship: DestroyFriendship!): Friendship!
}

input CreatePostInput {
  content: String!
  fileUrl: [String!]
  authorId: String!
  title: String
  status: String!
}

input CreateCommentInput {
  """Example field (placeholder)"""
  postId: String!

  """Example field (placeholder)"""
  content: String!

  """Example field (placeholder)"""
  authorId: String!
}

input UpdateCommentInput {
  """Example field (placeholder)"""
  postId: String
  content: String!

  """Example field (placeholder)"""
  authorId: String
  id: String!
}

input CreateConversationInput {
  """Example field (placeholder)"""
  authorId: String!

  """Example field (placeholder)"""
  memberIds: [String!]!

  """Example field (placeholder)"""
  isGroup: Boolean!

  """Example field (placeholder)"""
  groupName: String

  """Example field (placeholder)"""
  groupDescription: String

  """Example field (placeholder)"""
  groupImage: String
}

input CreateFriendshipInput {
  authorUsername: String!
  authorUserId: String!
  followingUsername: String!
  followingUserId: String!
}

input DestroyFriendship {
  authorUsername: String!
  authorUserId: String!
  followingUsername: String!
  followingUserId: String!
}